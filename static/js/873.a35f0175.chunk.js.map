{"version":3,"file":"static/js/873.a35f0175.chunk.js","mappings":"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","sources":["common/components/Tabs.component.tsx","common/services/deriv.service.ts","common/utils/index.ts","common/utils/response.util.ts","modules/trading/service/response-transformer.ts","modules/trading/service/trading-service.ts","modules/trading/business/tradingBusinessLayer.ts","modules/trading/components/Chart.component.tsx","modules/trading/components/TradingHistoryRealTime.component.tsx","common/components/Table.component.tsx","modules/trading/components/TradingSymbols.component.tsx","modules/trading/components/LoadingIndicator.component.tsx","modules/trading/page/Trading.page.tsx"],"sourcesContent":["import { FunctionComponent } from \"react\";\nimport MiTab, { TabProps } from \"@mui/material/Tab\";\nimport styled from \"styled-components\";\nimport Box from \"@mui/material/Box\";\n\ninterface ITabsProps extends TabProps {\n  className?: string;\n}\n\nexport const TabComponent: FunctionComponent<ITabsProps> = (\n  props: ITabsProps\n) => {\n  return (\n    <div className={props.className}>\n      <MiTab {...props} />\n    </div>\n  );\n};\n\nexport const Tab = styled(TabComponent)`\n  .MuiBox-root {\n    background: red;\n  }\n`;\n\nexport const SubTabsComponent: FunctionComponent<ITabsProps> = (\n  props: ITabsProps\n) => {\n  return (\n    <div className={props.className}>\n      <MiTab {...props} />\n    </div>\n  );\n};\n\nexport const SubTabs = styled(SubTabsComponent)`\n  .MuiTabs-root {\n    min-height: auto;\n  }\n  .MuiTab-root {\n    padding: 5px 15px !important;\n    min-height: auto;\n  }\n  .Mui-selected {\n    background: #ff444f !important;\n    color: white !important;\n    border-radius: 20px;\n  }\n  .ant-tabs-tab-active {\n    .ant-tabs-tab-btn {\n      background: #ff444f;\n      font-weight: normal;\n      color: white !important;\n    }\n  }\n`;\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst TabPanelComponent = (props: TabPanelProps) => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ pt: 4 }}>\n          <Box>{children}</Box>\n        </Box>\n      )}\n    </div>\n  );\n};\n\nexport const TabPanel = styled(TabPanelComponent)``;\n","import DerivAPIBasic from \"@deriv/deriv-api/dist/DerivAPIBasic\";\n\nclass DerivUtility {\n  private _socketConnection: WebSocket;\n  private _derivAPI;\n  private static _instance: DerivUtility;\n  constructor() {\n    this._socketConnection = new WebSocket(\n      `${process.env.REACT_APP_SOCKET_BASE_URL}?app_id=${process.env.REACT_APP_ID}`\n    );\n    this._derivAPI = new DerivAPIBasic({ connection: this._socketConnection });\n  }\n\n  static getInstance(): DerivUtility {\n    if (!DerivUtility._instance) {\n      DerivUtility._instance = new DerivUtility();\n    }\n    return DerivUtility._instance;\n  }\n  get derivAPI() {\n    return this._derivAPI;\n  }\n  get socketConnection(): WebSocket {\n    return this._socketConnection;\n  }\n}\n\nlet DerivUtilityInstance = Object.freeze(DerivUtility.getInstance());\n\nexport default DerivUtilityInstance;\n","export const generateRandomId = () => {\n  return new Date().getTime() + Math.floor(Math.random() * 10000);\n};\n","interface IValidateRequestProps {\n  messageType: string;\n  id: number;\n  data: any;\n}\n\ninterface IValidateResponseProps {\n  hasError: boolean;\n  isEqualToMessageType: boolean;\n}\n\nclass ResponseUtil {\n  static validateResponse(\n    props: IValidateRequestProps\n  ): IValidateResponseProps {\n    let hasError = false;\n    let isEqualToMessageType = false;\n    const { data, messageType, id } = props;\n    if (data.req_id === id && data.msg_type === messageType) {\n      isEqualToMessageType = true;\n      if (data.error) {\n        hasError = true;\n      }\n    }\n    return {\n      hasError,\n      isEqualToMessageType,\n    };\n  }\n}\n\nexport default ResponseUtil;\n","import map from \"lodash/map\";\nimport { ISymbol } from \"common/models/symbol.model\";\nimport { ISymbolTrade } from \"common/models/symbol-trade.model\";\n\nclass RequestTransformer {\n  static activeSymbolApiResponseTransformer(data: any): ISymbol[] {\n    const symbols: ISymbol[] = map(data.active_symbols, (datum) => {\n      return {\n        allow_forward_starting: Boolean(datum.allow_forward_starting),\n        display_name: datum.display_name,\n        display_order: datum.display_name,\n        exchange_is_open: Boolean(datum.exchange_is_open),\n        is_trading_suspended: Boolean(datum.is_trading_suspended),\n        market: datum.market,\n        market_display_name: datum.market_display_name,\n        pip: datum.pip,\n        subgroup: datum.subgroup,\n        subgroup_display_name: datum.subgroup_display_name,\n        submarket: datum.submarket,\n        submarket_display_name: datum.submarket_display_name,\n        symbol: datum.symbol,\n        symbol_type: datum.symbol_type,\n      };\n    });\n\n    return symbols;\n  }\n\n  static symbolStreamTransformer(data: any): ISymbolTrade {\n    return {\n      timestamp: data.ohlc.epoch,\n      open: parseFloat(data.ohlc.open),\n      close: parseFloat(data.ohlc.close),\n      high: parseFloat(data.ohlc.high),\n      low: parseFloat(data.ohlc.low),\n    };\n  }\n}\n\nexport default RequestTransformer;\n","import derivService from \"common/services/deriv.service\";\nimport { generateRandomId } from \"common/utils/\";\nimport responseUtil from \"common/utils/response.util\";\nimport { Subject } from \"rxjs\";\nimport responseTransformer from \"modules/trading/service/response-transformer\";\nimport { ISymbol } from \"common/models/symbol.model\";\nimport { ICandle } from \"common/models/candle.model\";\n\ninterface ITickHistoryPayload {\n  ticks_history: string;\n  adjust_start_time: number;\n  count: number;\n  end: string | number;\n  start: number;\n  style: string;\n  req_id?: number;\n}\n\nexport interface IRequestPayloadForActiveSymbols {\n  activeSymbols: string;\n  productType: string;\n}\n\nclass TradingService {\n  /**\n   * This function will return list of active symbols\n   * @param IRequestPayloadForActiveSymbols\n   * @returns\n   */\n\n  static async retrieveSymbols({\n    activeSymbols,\n    productType,\n  }: IRequestPayloadForActiveSymbols): Promise<ISymbol[]> {\n    const req_id = generateRandomId();\n    const apiPayload = {\n      req_id,\n      active_symbols: activeSymbols,\n      product_type: productType,\n    };\n    return new Promise((resolve, reject) => {\n      const messageReceiveCallback = (message: MessageEvent<any>) => {\n        try {\n          const data = JSON.parse(message.data);\n          const messageType = \"active_symbols\";\n          const response = responseUtil.validateResponse({\n            data,\n            messageType,\n            id: req_id,\n          });\n          if (response.isEqualToMessageType) {\n            if (response.hasError) {\n              derivService.socketConnection.removeEventListener(\n                \"message\",\n                messageReceiveCallback\n              );\n              reject(data);\n            }\n            const transformedData =\n              responseTransformer.activeSymbolApiResponseTransformer(data);\n            resolve(transformedData);\n          }\n        } catch (error) {\n          reject(error);\n        } finally {\n          derivService.socketConnection.removeEventListener(\n            \"message\",\n            messageReceiveCallback\n          );\n        }\n      };\n      derivService.socketConnection.addEventListener(\n        \"message\",\n        messageReceiveCallback\n      );\n      derivService.derivAPI.activeSymbols(apiPayload);\n    });\n  }\n  /**\n   * This function will return the history of particular symbol\n   * @param ITickHistoryPayload\n   * @returns\n   */\n\n  static async retrieveTicksHistory(\n    apiQueryParam: ITickHistoryPayload\n  ): Promise<ICandle[]> {\n    const req_id = generateRandomId();\n    const apiPayload = {\n      ...apiQueryParam,\n      req_id,\n    };\n    return new Promise((resolve, reject) => {\n      const messageReceiveCallback = (message: MessageEvent<any>) => {\n        try {\n          const data = JSON.parse(message.data);\n          const messageType = \"candles\";\n          const response = responseUtil.validateResponse({\n            data,\n            messageType,\n            id: req_id,\n          });\n\n          if (response.isEqualToMessageType) {\n            if (response.hasError) {\n              derivService.socketConnection.removeEventListener(\n                \"message\",\n                messageReceiveCallback\n              );\n              reject(new Error());\n            }\n            derivService.socketConnection.removeEventListener(\n              \"message\",\n              messageReceiveCallback\n            );\n\n            resolve(data.candles);\n          }\n        } catch (error) {\n          console.log(\"error\");\n          reject(error);\n        }\n      };\n      derivService.socketConnection.addEventListener(\n        \"message\",\n        messageReceiveCallback\n      );\n      derivService.derivAPI.ticksHistory(apiPayload);\n    });\n  }\n\n  /**\n   * This function will return real time trade updates\n   * @param ITickHistoryPayload\n   * @returns\n   */\n  static subscribeTicks(tickHistoryRequestPayload: ITickHistoryPayload) {\n    const req_id = generateRandomId();\n    const requestPayload = {\n      ...tickHistoryRequestPayload,\n      req_id,\n      subscribe: 1,\n    };\n    const request = new Subject<any>();\n    const messageReceiveCallback = (message: MessageEvent<any>) => {\n      try {\n        const data = JSON.parse(message.data);\n        const messageType = \"ohlc\";\n        const response = responseUtil.validateResponse({\n          data,\n          messageType,\n          id: req_id,\n        });\n        if (response.isEqualToMessageType) {\n          if (response.hasError) {\n            derivService.socketConnection.removeEventListener(\n              \"message\",\n              messageReceiveCallback\n            );\n            request.error(new Error());\n          }\n          const transformedData =\n            responseTransformer.symbolStreamTransformer(data);\n          request.next(transformedData);\n        }\n      } catch (error) {\n        derivService.socketConnection.removeEventListener(\n          \"message\",\n          messageReceiveCallback,\n          false\n        );\n        request.error(error);\n      }\n    };\n    derivService.socketConnection.addEventListener(\n      \"message\",\n      messageReceiveCallback\n    );\n    derivService.derivAPI.ticksHistory(requestPayload);\n    return {\n      observable: request,\n      unsubscribe: () => {\n        derivService.socketConnection.removeEventListener(\n          \"message\",\n          messageReceiveCallback\n        );\n        request.complete();\n      },\n    };\n  }\n}\n\nexport default TradingService;\n","import groupBy from \"lodash/groupBy\";\nimport map from \"lodash/map\";\nimport { IMarket, ISubMarket } from \"common/models/trading-market.model\";\nimport { ISymbol } from \"common/models/symbol.model\";\n\nclass BusinessLayer {\n  static prepareActiveSymbolApiResponseForView(\n    data: ISymbol[] | undefined\n  ): IMarket[] {\n    if (!data) {\n      return [];\n    }\n    const marketByKey = groupBy(data, \"market\");\n    const markets = map(marketByKey, (datum) => {\n      const subMarketByKey = groupBy(datum, \"submarket\");\n      const subMarkets: ISubMarket[] = map(subMarketByKey, (subMarketDatum) => {\n        return {\n          key: subMarketDatum[0].submarket,\n          label: subMarketDatum[0].submarket_display_name,\n          symbols: subMarketDatum,\n        };\n      });\n\n      const market: IMarket = {\n        key: datum[0].market,\n        label: datum[0].market_display_name,\n        subMarkets: subMarkets,\n      };\n      return market;\n    });\n    return markets;\n  }\n}\n\nexport default BusinessLayer;\n","import { FunctionComponent } from \"react\";\nimport { ICandle } from \"common/models/candle.model\";\nimport { red, green } from \"@mui/material/colors\";\nimport reduce from \"lodash/reduce\";\nimport {\n  AreaChart,\n  Area,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  ReferenceLine,\n  Label,\n  Dot,\n  DotProps,\n  Cell,\n  ReferenceDot,\n  XAxis,\n} from \"recharts\";\n\ninterface IProps {\n  tradingHistory: ICandle[];\n  priceDifference: number;\n}\n\nconst ChartComponent: FunctionComponent<IProps> = (props: IProps) => {\n  const { tradingHistory, priceDifference } = props;\n\n  const min = reduce(tradingHistory, (acc, datum) => {\n    if (datum.close < acc.close) {\n      return datum;\n    }\n\n    return acc;\n  });\n  const max = reduce(tradingHistory, (acc, datum) => {\n    if (datum.close > acc.close) {\n      return datum;\n    }\n    return acc;\n  });\n\n  return (\n    <div>\n      <LineChart width={300} height={50} data={tradingHistory}>\n        <Tooltip />\n        <YAxis domain={[\"dataMin\", \"dataMax\"]} hide />\n        <XAxis dataKey=\"epoch\" hide />\n\n        <Line\n          strokeWidth={2}\n          type=\"monotone\"\n          dataKey=\"close\"\n          stroke={priceDifference > 0 ? green[500] : red[500]}\n          dot={false}\n        />\n        <ReferenceDot y={max?.close} x={max?.epoch} r={5} fill={\"black\"} />\n        <ReferenceDot y={min?.close} x={min?.epoch} r={5} fill={\"black\"} />\n      </LineChart>\n    </div>\n  );\n};\n\nexport default ChartComponent;\n","import { useEffect, useState } from \"react\";\nimport { Button, Skeleton, Box, Stack, Typography } from \"@mui/material\";\nimport { ISymbol } from \"common/models/symbol.model\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { useQuery } from \"react-query\";\nimport TableCell from \"@mui/material/TableCell\";\nimport moment from \"moment\";\nimport TradingService from \"modules/trading/service/trading-service\";\nimport { ISymbolTrade } from \"common/models/symbol-trade.model\";\nimport { ICandle } from \"common/models/candle.model\";\nimport { green, red } from \"@mui/material/colors\";\n\nimport UpArrowUpIcon from \"@mui/icons-material/KeyboardArrowUp\";\nimport DownArrowIcon from \"@mui/icons-material/KeyboardArrowDown\";\nimport Chart from \"modules/trading/components/Chart.component\";\n\ninterface IProps {\n  symbol: ISymbol;\n}\n\nconst TradingHistoryRealTime = (props: IProps) => {\n  const { symbol } = props;\n  const [latestTradingData, setLatestTradingDataTradingLiveData] =\n    useState<ISymbolTrade | null>(null);\n\n  const {\n    isLoading,\n    error,\n    data: tradeHistory,\n  } = useQuery<ICandle[]>([\"retrieveTicksHistory\", symbol.symbol], () => {\n    const startTime = moment().subtract(24, \"hour\").unix();\n    const payload = {\n      ticks_history: symbol.symbol,\n      adjust_start_time: 1,\n      count: 5000,\n      end: \"latest\",\n      start: startTime,\n      style: \"candles\",\n    };\n    return TradingService.retrieveTicksHistory(payload);\n  });\n\n  useEffect(() => {\n    const requestPayload = {\n      ticks_history: symbol.symbol,\n      adjust_start_time: 1,\n      count: 10,\n      end: \"latest\",\n      start: 1,\n      style: \"candles\",\n      subscribe: 1,\n    };\n    const { observable, unsubscribe } =\n      TradingService.subscribeTicks(requestPayload);\n\n    observable.subscribe((data) => {\n      setLatestTradingDataTradingLiveData(data);\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [symbol]);\n\n  let priceDifference = 0;\n\n  if (tradeHistory && latestTradingData) {\n    const closingPrice = tradeHistory?.[0].close ?? 0;\n    const latestPrice = latestTradingData?.close ?? 0;\n    priceDifference = latestPrice - closingPrice;\n  }\n  if (tradeHistory?.length && !latestTradingData) {\n    priceDifference =\n      tradeHistory[tradeHistory.length - 1].close - tradeHistory[0].close;\n  }\n\n  return (\n    <TableRow>\n      <TableCell width=\"20%\">{symbol.display_name}</TableCell>\n      <TableCell width=\"20%\">\n        {latestTradingData?.close.toFixed(4) ??\n          tradeHistory?.[tradeHistory.length - 1]?.close.toFixed(4) ?? (\n            <Skeleton variant=\"rounded\" width={100} height={20} />\n          )}\n      </TableCell>\n      <TableCell width=\"20%\">\n        {tradeHistory || latestTradingData ? (\n          <Box\n            color={\n              priceDifference > 0\n                ? green[500]\n                : priceDifference < 0\n                ? red[500]\n                : \"black\"\n            }\n          >\n            {priceDifference > 0 ? (\n              <Stack direction=\"row\">\n                <Box>\n                  <UpArrowUpIcon />\n                </Box>\n                <Typography>{priceDifference.toFixed(4)}</Typography>\n              </Stack>\n            ) : priceDifference < 0 ? (\n              <Stack direction=\"row\">\n                <Box>\n                  <DownArrowIcon />\n                </Box>\n                <Typography>{priceDifference.toFixed(4)}</Typography>\n              </Stack>\n            ) : (\n              <Stack direction=\"row\">\n                <Typography>{priceDifference.toFixed(4)}</Typography>\n              </Stack>\n            )}\n          </Box>\n        ) : (\n          <Skeleton variant=\"rounded\" width={100} height={20} />\n        )}\n      </TableCell>\n      <TableCell width=\"20%\">\n        {tradeHistory ? (\n          <Chart\n            tradingHistory={tradeHistory}\n            priceDifference={priceDifference}\n          />\n        ) : (\n          <Skeleton variant=\"rounded\" width={100} height={20} />\n        )}\n      </TableCell>\n      <TableCell align=\"right\">\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          disabled={!symbol.exchange_is_open || symbol.is_trading_suspended}\n        >\n          Trade\n        </Button>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nexport default TradingHistoryRealTime;\n","import { styled } from \"@mui/material/styles\";\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\n\nexport const Th = styled(TableCell)(({ theme }) => ({\n  [`&.${tableCellClasses.head}`]: {\n    color: \"#9b9b9b\",\n  },\n  [`&.${tableCellClasses.body}`]: {\n    fontSize: 14,\n  },\n}));\n","import { FunctionComponent, useEffect } from \"react\";\nimport map from \"lodash/map\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { ISymbol } from \"common/models/symbol.model\";\nimport TradingHistoryRealTime from \"modules/trading/components/TradingHistoryRealTime.component\";\nimport { Th } from \"common/components/Table.component\";\n\ninterface DataType {\n  key: string;\n  name: string;\n  age: number;\n  address: string;\n  tags: string[];\n}\n\ninterface IProps {\n  symbols: ISymbol[];\n}\n\nconst TradingSymbols: FunctionComponent<IProps> = (props: IProps) => {\n  const { symbols } = props;\n  return (\n    <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n      <TableHead>\n        <TableRow>\n          <Th>Name</Th>\n          <Th>Last Price</Th>\n          <Th>24h change</Th>\n          <Th>&nbsp;</Th>\n          <Th>&nbsp;</Th>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {map(symbols, (symbol, index) => (\n          <TradingHistoryRealTime key={index} symbol={symbol} />\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default TradingSymbols;\n","import { Box, Skeleton, Stack, Divider } from \"@mui/material\";\n\nconst LoadingIndicator = () => {\n  return (\n    <Box>\n      <Stack direction=\"row\" spacing={2}>\n        <Skeleton width={100} height={60} />\n        <Skeleton width={100} height={60} />\n        <Skeleton width={100} height={60} />\n        <Skeleton width={100} height={60} />\n        <Skeleton width={100} height={60} />\n        <Skeleton width={100} height={60} />\n      </Stack>\n      <Divider />\n      <Stack mt={1}>\n        <Skeleton height={20} />\n        <Skeleton height={20} />\n        <Skeleton height={20} />\n        <Skeleton height={20} />\n      </Stack>\n    </Box>\n  );\n};\n\nexport default LoadingIndicator;\n","import { useEffect, useMemo, useState } from \"react\";\nimport map from \"lodash/map\";\nimport findIndex from \"lodash/findIndex\";\nimport { useQuery } from \"react-query\";\nimport styled from \"styled-components\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Box from \"@mui/material/Box\";\nimport Alert from \"@mui/material/Alert\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { Tab, SubTabs, TabPanel } from \"common/components/Tabs.component\";\nimport { IMarket } from \"common/models/trading-market.model\";\nimport TradingService from \"modules/trading/service/trading-service\";\nimport businessLayer from \"modules/trading/business/tradingBusinessLayer\";\nimport Divider from \"@mui/material/Divider\";\nimport { grey } from \"@mui/material/colors\";\nimport TradingSymbols from \"modules/trading/components/TradingSymbols.component\";\nimport { ISymbol } from \"common/models/symbol.model\";\nimport LoadingSkeleton from \"modules/trading/components/LoadingIndicator.component\";\nimport deriveService from \"common/services/deriv.service\";\n\nconst TradingPage = () => {\n  const [parentTabSelectedIndex, setParentTabSelectedIndex] = useState(0);\n\n  const [childTabSelectedIndex, setChildTabSelectedIndex] = useState(0);\n\n  const [isConnectionLost, setConnectionErrorState] = useState(false);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const { isLoading, error, data } = useQuery<ISymbol[]>(\n    [\"retrieveSymbols\"],\n    () => {\n      const payload = {\n        activeSymbols: \"brief\",\n        productType: \"basic\",\n      };\n      return TradingService.retrieveSymbols(payload);\n    }\n  );\n\n  const activeSymbols: IMarket[] = useMemo(() => {\n    return businessLayer.prepareActiveSymbolApiResponseForView(data);\n  }, [data]);\n\n  const _handleParentTabChange = (\n    event: React.SyntheticEvent,\n    newValue: number\n  ) => {\n    setSearchParams({\n      market: activeSymbols[newValue].key,\n    });\n  };\n\n  const _handleChildTabChange = (\n    event: React.SyntheticEvent,\n    newValue: number\n  ) => {\n    setSearchParams({\n      market: activeSymbols[parentTabSelectedIndex].key,\n      submarket: activeSymbols[parentTabSelectedIndex].subMarkets[newValue].key,\n    });\n  };\n\n  useEffect(() => {\n    const _handleSocketConnectionError = () => {\n      setConnectionErrorState(true);\n    };\n    deriveService.socketConnection.addEventListener(\n      \"error\",\n      _handleSocketConnectionError\n    );\n    return () => {\n      deriveService.socketConnection.removeEventListener(\n        \"error\",\n        _handleSocketConnectionError\n      );\n    };\n  }, []);\n\n  useEffect(() => {\n    if (activeSymbols.length) {\n      const selectIndex = findIndex(activeSymbols, {\n        key: searchParams.get(\"market\") || undefined,\n      });\n      setParentTabSelectedIndex(selectIndex < 0 ? 0 : selectIndex);\n\n      const selectChildIndex = findIndex(\n        activeSymbols[parentTabSelectedIndex].subMarkets,\n        {\n          key: searchParams.get(\"submarket\") || undefined,\n        }\n      );\n      setChildTabSelectedIndex(selectChildIndex < 0 ? 0 : selectChildIndex);\n    }\n  }, [searchParams, activeSymbols]);\n\n  return (\n    <div>\n      {error || isConnectionLost ? (\n        <Box className=\"page-content\" my={5}>\n          <Alert severity=\"error\">\n            The Network connection is lost, Please refresh page\n          </Alert>\n        </Box>\n      ) : null}\n      {isLoading && !isConnectionLost ? (\n        <Box className=\"page-content\">\n          <LoadingSkeleton />\n        </Box>\n      ) : null}\n      {!isLoading && !isConnectionLost ? (\n        <>\n          <Box className=\"page-content\" bgcolor={grey[100]}>\n            <Tabs\n              value={parentTabSelectedIndex}\n              onChange={_handleParentTabChange}\n            >\n              {map(activeSymbols, (datum, index) => {\n                return (\n                  <Tab label={datum.label} key={datum.key} value={index} />\n                );\n              })}\n            </Tabs>\n          </Box>\n          <Divider />\n          {map(activeSymbols, (datum, index) => {\n            return (\n              <TabPanel\n                key={datum.key}\n                value={parentTabSelectedIndex}\n                index={index}\n              >\n                <Box className=\"page-content\">\n                  <Tabs\n                    value={childTabSelectedIndex}\n                    TabIndicatorProps={{ style: { display: \"none\" } }}\n                    style={{\n                      minHeight: \"auto\",\n                    }}\n                    onChange={_handleChildTabChange}\n                  >\n                    {map(datum.subMarkets, (datum, index) => {\n                      return (\n                        <SubTabs\n                          label={datum.label}\n                          key={datum.key}\n                          value={index}\n                        />\n                      );\n                    })}\n                  </Tabs>\n                </Box>\n                {map(datum.subMarkets, (datum, index) => {\n                  return (\n                    <TabPanel\n                      key={datum.key}\n                      value={childTabSelectedIndex}\n                      index={index}\n                    >\n                      <div key={datum.key} className=\"page-content\">\n                        <TradingSymbols symbols={datum.symbols} />\n                      </div>\n                    </TabPanel>\n                  );\n                })}\n              </TabPanel>\n            );\n          })}\n        </>\n      ) : null}\n    </div>\n  );\n};\n\nexport default styled(TradingPage)``;\n"],"names":["Tab","styled","props","_jsx","className","children","MiTab","_objectSpread","_templateObject","_taggedTemplateLiteral","SubTabs","_templateObject2","TabPanel","value","index","other","_objectWithoutProperties","_excluded","role","hidden","id","concat","Box","sx","pt","_templateObject3","DerivUtility","_classCallCheck","_socketConnection","_derivAPI","this","WebSocket","process","REACT_APP_SOCKET_BASE_URL","REACT_APP_ID","DerivAPIBasic","connection","_createClass","key","get","_instance","Object","freeze","getInstance","generateRandomId","Date","getTime","Math","floor","random","ResponseUtil","hasError","isEqualToMessageType","data","messageType","req_id","msg_type","error","RequestTransformer","map","active_symbols","datum","allow_forward_starting","Boolean","display_name","display_order","exchange_is_open","is_trading_suspended","market","market_display_name","pip","subgroup","subgroup_display_name","submarket","submarket_display_name","symbol","symbol_type","timestamp","ohlc","epoch","open","parseFloat","close","high","low","TradingService","_retrieveSymbols","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","activeSymbols","productType","apiPayload","wrap","_context","prev","next","product_type","abrupt","Promise","resolve","reject","derivService","messageReceiveCallback","message","JSON","parse","response","responseUtil","transformedData","responseTransformer","stop","_x","apply","arguments","_retrieveTicksHistory","_callee2","apiQueryParam","_context2","Error","candles","console","log","_x2","tickHistoryRequestPayload","requestPayload","subscribe","request","Subject","observable","unsubscribe","complete","BusinessLayer","marketByKey","groupBy","subMarketByKey","subMarkets","subMarketDatum","label","symbols","tradingHistory","priceDifference","min","reduce","acc","max","_jsxs","LineChart","width","height","Tooltip","YAxis","domain","hide","XAxis","dataKey","Line","strokeWidth","type","stroke","green","red","dot","ReferenceDot","y","x","r","fill","_latestTradingData$cl2","_tradeHistory","_useState","useState","_useState2","_slicedToArray","latestTradingData","setLatestTradingDataTradingLiveData","_useQuery","useQuery","startTime","moment","subtract","unix","payload","ticks_history","adjust_start_time","count","end","start","style","tradeHistory","isLoading","useEffect","_TradingService$subsc","_tradeHistory$0$close","_latestTradingData$cl","closingPrice","length","TableRow","TableCell","toFixed","Skeleton","variant","color","Stack","direction","UpArrowUpIcon","Typography","DownArrowIcon","Chart","align","Button","disabled","Th","_ref2","theme","_defineProperty","tableCellClasses","fontSize","Table","minWidth","TableHead","TableBody","TradingHistoryRealTime","spacing","Divider","mt","parentTabSelectedIndex","setParentTabSelectedIndex","_useState3","_useState4","childTabSelectedIndex","setChildTabSelectedIndex","_useState5","_useState6","isConnectionLost","setConnectionErrorState","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","useMemo","businessLayer","_handleChildTabChange","event","newValue","_handleSocketConnectionError","deriveService","selectIndex","findIndex","undefined","selectChildIndex","my","Alert","severity","LoadingSkeleton","_Fragment","bgcolor","grey","Tabs","onChange","TabIndicatorProps","display","minHeight","TradingSymbols"],"sourceRoot":""}